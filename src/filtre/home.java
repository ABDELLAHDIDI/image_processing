/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package filtre;

import classes.funcs;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Hashtable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.core.Scalar;
import org.opencv.imgcodecs.Imgcodecs;

/**
 *
 * @author ABDELLAH DIDI
 */
public class home extends javax.swing.JFrame {

    /**
     * Creates new form home
     */
         ImageIcon icon=null;
         Image img =null;
         BufferedImage fimg=null;
         String path=  "./img"; 
         String nom="";
         String ImagePath="";
         
    public home() {
        initComponents();
        
        setTitle(" Filtrage spacial");
        
        jPanel1.setVisible(false);
        
jSlider1.setMaximum(17);
jSlider1.setMinimum(3);
jSlider1.setMajorTickSpacing(2);
jSlider1.setPaintTicks(true);  
jSlider1.setPaintLabels(true);
jSlider1.setValue(3);

jSlider2.setMinimum(3);
jSlider2.setMaximum(17);
jSlider2.setMajorTickSpacing(2);
jSlider2.setPaintTicks(true);  
jSlider2.setPaintLabels(true);

   

choice1.add("Sobel");
choice1.add("Canny");
choice1.add("Prewitt");
choice1.add("Laplacian");
choice1.add("Gray");
choice1.add("Binary");
choice1.add("Median");
choice1.add("Gaussian");
choice1.add("Pixelate");
choice1.add("Moyenne");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        choice1 = new java.awt.Choice();
        jButton1 = new javax.swing.JButton();
        jSlider1 = new javax.swing.JSlider();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jSlider2 = new javax.swing.JSlider();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        choice1.setName("Filtre"); // NOI18N
        choice1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                choice1ItemStateChanged(evt);
            }
        });

        jButton1.setText("Filtrer");
        jButton1.setName("filtrer"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jButton2.setText("Reinintialer");
        jButton2.setName("Reinnitialer"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel1.setName("image"); // NOI18N
        jLabel1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jLabel1AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setText("Choisir un filtre");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setText("Filtrer votre image ");

        jLabel5.setText("Kernel");

        jLabel6.setText("Gaussian");

        jSlider2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider2StateChanged(evt);
            }
        });

        jLabel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67)
                .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jLabel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel8.setName("image"); // NOI18N
        jLabel8.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jLabel8AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jButton3.setText("Choisir une image ");
        jButton3.setName("Choisir"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Sauvgarder");
        jButton4.setName("filtrer"); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)))
                .addGap(95, 95, 95)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(choice1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(103, 103, 103)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(67, 67, 67)
                                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(498, 498, 498)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(choice1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(91, 91, 91))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//    public home(Image image) {
//        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//        setTitle("Image Frame");
//        setResizable(false);
//
//        JLabel label = new JLabel(new ImageIcon(image));
//        label.setHorizontalAlignment(SwingConstants.CENTER);
//        getContentPane().add(label);
//
//        pack();
//        setLocationRelativeTo(null);
//    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
          JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Choose an image file");

        FileFilter imageFilter = new FileNameExtensionFilter("Image files", "jpg", "jpeg", "png", "gif");
        fileChooser.setFileFilter(imageFilter);
           fileChooser.setAcceptAllFileFilterUsed(false);
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
             ImagePath=selectedFile.getAbsolutePath();
            
           try{
                 img = ImageIO.read(selectedFile);
           }
           catch(Exception e){
               return;
           }
                  icon = new ImageIcon(img);
                 
                 
        int desiredWidth = jLabel1.getWidth();
        int desiredHeight = jLabel1.getHeight();

        // Get the image from the ImageIcon
        Image originalImage = icon.getImage();

        // Scale the image
        Image scaledImage = originalImage.getScaledInstance(desiredWidth, desiredHeight, Image.SCALE_SMOOTH);

        // Create a new ImageIcon from the scaled image
        ImageIcon scaledImageIcon = new ImageIcon(scaledImage);

        jLabel1.setIcon(scaledImageIcon);
        
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jLabel1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jLabel1AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1AncestorAdded

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
int value = jSlider1.getValue();
   if(value %2 == 0 ) jSlider1.setValue(value+1);
                jLabel2.setText("Value: " + value);        // TODO add your handling code here:
    }//GEN-LAST:event_jSlider1StateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      jLabel1.setIcon(null); 
        jLabel8.setIcon(null); 
      choice1.select(0);
      img=null;icon=null;fimg=null;nom="";ImagePath="";
// TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
BufferedImage bufferedImage = null;
       if(img == null || icon == null ) return ;
       if(  choice1.getSelectedItem() == "Sobel") {
          bufferedImage =  new Filtre().Filtre_sobel ( img ,jSlider1.getValue()  );
         // img = bufferedImage.getScaledInstance(bufferedImage.getWidth(), bufferedImage.getHeight(), Image.SCALE_DEFAULT);
            icon = new ImageIcon(bufferedImage);
       }
       else      if(  choice1.getSelectedItem() == "Canny") {
           
           if(  11 <=   jSlider1.getValue() ||     jSlider2.getValue()  <=  5  ||  jSlider1.getValue() ==  jSlider2.getValue()   ) 
           {
                                    JOptionPane.showMessageDialog(null, "Ces paramètres ne fonction pas avec le filtre Canny  !!!!!!!!!!!!!!", "Information", JOptionPane.INFORMATION_MESSAGE);

                                    return;
           }
           
           
          bufferedImage =  new Filtre().Filtre_Canny ( img ,jSlider1.getValue() , jSlider2.getValue() );
         // img = bufferedImage.getScaledInstance(bufferedImage.getWidth(), bufferedImage.getHeight(), Image.SCALE_DEFAULT);
            icon = new ImageIcon(bufferedImage);
       }    else      if(  choice1.getSelectedItem() == "Prewitt") {
          bufferedImage =  new Filtre().Filtre_Prewitt ( img ,jSlider1.getValue() );
         // img = bufferedImage.getScaledInstance(bufferedImage.getWidth(), bufferedImage.getHeight(), Image.SCALE_DEFAULT);
            icon = new ImageIcon(bufferedImage);
       }
         else      if(  choice1.getSelectedItem() == "Laplacian") {
        
           
             
             
              bufferedImage  =   Filtre.Filtre_Laplacian ( img,jSlider1.getValue());
              
            icon = new ImageIcon(bufferedImage);
            
       }
                else      if(  choice1.getSelectedItem() == "Gray") {

                    
                     System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
                     Mat inputImage = Imgcodecs.imread(ImagePath, Imgcodecs.IMREAD_UNCHANGED);
                   
                   
                    
                    
    try {
        
        bufferedImage =    Mat2BufferedImage(  funcs.toGray( inputImage));
  icon = new ImageIcon(bufferedImage);
    } catch (IOException ex) {
        Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
    }
       }          else      if(  choice1.getSelectedItem() == "Binary") {

                    
                     System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
                     Mat inputImage = Imgcodecs.imread(ImagePath, Imgcodecs.IMREAD_UNCHANGED);
                   
                   
                    
                    
    try {
        
        bufferedImage =    Mat2BufferedImage(  funcs.binary( inputImage));
  icon = new ImageIcon(bufferedImage);
    } catch (IOException ex) {
        Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
    }
       }
       else      if(  choice1.getSelectedItem() == "Median") {

                    
                 
        bufferedImage =   funcs.medianBlur((BufferedImage) img , jSlider1.getValue() );
        
          icon = new ImageIcon(bufferedImage);
        
    }
    
       else      if(  choice1.getSelectedItem() == "Gaussian") {

                    
                     System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
                     Mat inputImage = Imgcodecs.imread(ImagePath, Imgcodecs.IMREAD_UNCHANGED);
                   
                             Mat outputImage = new Mat(inputImage.size(), inputImage.type(),new Scalar(0));
                               var GaussianKernel=funcs. getGaussianKernel(jSlider1.getValue(),3.0);
                    
                    funcs.filterImageWP( inputImage , outputImage, GaussianKernel);//with padding 
                    
                   // filterImage( inputImage , outputImage, GaussianKernel);//without  padding 
    try {
        
        bufferedImage =    Mat2BufferedImage(  outputImage);
  icon = new ImageIcon(bufferedImage);
    } catch (IOException ex) {
        Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
    }
       }
             else      if(  choice1.getSelectedItem() == "Pixelate") {

                    
                     System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
                     Mat inputImage = Imgcodecs.imread(ImagePath, Imgcodecs.IMREAD_UNCHANGED);
                   
                     Mat outputImage = new Mat(inputImage.size(), inputImage.type(),new Scalar(0));
                             
                    funcs.pixelate( inputImage , outputImage, jSlider1.getValue());
                   
    try {
        
        bufferedImage =    Mat2BufferedImage(  outputImage);
  icon = new ImageIcon(bufferedImage);
    } catch (IOException ex) {
        Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
    }
       }
          else      if(  choice1.getSelectedItem() == "Moyenne") {

                    
                     System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
                     Mat inputImage = Imgcodecs.imread(ImagePath, Imgcodecs.IMREAD_UNCHANGED);
                   
                    Mat outputImage = new Mat(inputImage.size(), inputImage.type(),new Scalar(0));
                               var kernetMat=funcs.getMkernel(jSlider1.getValue());
                    
                    funcs.filterImageWP( inputImage , outputImage, kernetMat);//with padding 
                    
                   // filterImage( inputImage , outputImage, kernetMat);//without  padding 
         
    try {
        
        bufferedImage =    Mat2BufferedImage(  outputImage);
  icon = new ImageIcon(bufferedImage);
    } catch (IOException ex) {
        Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
    }
       }
       fimg=bufferedImage;
        
        nom=choice1.getSelectedItem()+"_"+jSlider1.getValue();
        if(  choice1.getSelectedItem() == "Canny") nom=nom+"_Gaussian_"+jSlider2.getValue();
      //  setEnabled(false);
        
      // new  Résultat(bufferedImage,icon,this,nom);
      
      
            int desiredWidth = jLabel8.getWidth();
        int desiredHeight = jLabel8.getHeight();

        // Get the image from the ImageIcon
        Image originalImage = icon.getImage();

        // Scale the image
        Image scaledImage = originalImage.getScaledInstance(desiredWidth, desiredHeight, Image.SCALE_SMOOTH);

        // Create a new ImageIcon from the scaled image
        ImageIcon scaledImageIcon = new ImageIcon(scaledImage);

        jLabel8.setIcon(scaledImageIcon);
       
       
     
//      JFrame frame = new JFrame("Résultat");
//      JLabel label = new JLabel(icon);
//
//            // Add the JLabel to the frame
//            frame.getContentPane().add(label);
//
//            // Set the size of the frame to match the size of the image
//            frame.setSize(new Dimension(img.getWidth(null), img.getHeight(null)));
//
//            // Make the frame visible
//            frame.setVisible(true);      // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jSlider2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider2StateChanged
int value = jSlider2.getValue();
   if(value %2 == 0 ) jSlider2.setValue(value+1);
                jLabel7.setText("Value: " + value);          // TODO add your handling code here:
    }//GEN-LAST:event_jSlider2StateChanged

    private void choice1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_choice1ItemStateChanged
        if(  choice1.getSelectedItem() == "Canny") 
        jPanel1.setVisible(true ); 
        else       jPanel1.setVisible(false);// TODO add your handling code here:
    }//GEN-LAST:event_choice1ItemStateChanged

    private void jLabel8AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jLabel8AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel8AncestorAdded

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        if(fimg == null) return;
        try{    
               File outputFile = new File(path+"\\output_"+nom+".png");

            // Save the image to the output file
            ImageIO.write( fimg , "png", outputFile);
            
             JOptionPane.showMessageDialog(null, "Vous avez bien enregistré l'image filtrée !", "Information", JOptionPane.INFORMATION_MESSAGE);
    
        } catch (IOException e) {
            System.out.println("Error saving image: " + e.getMessage());
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new home().setVisible(true);
            }
        });
    }
    
    
    public Mat matify(BufferedImage im) {
//    // Convert INT to BYTE
//    //im = new BufferedImage(im.getWidth(), im.getHeight(),BufferedImage.TYPE_3BYTE_BGR);
//    // Convert bufferedimage to byte array
//    byte[] pixels = ((DataBufferByte) im.getRaster().getDataBuffer())
//            .getData();
//
//    // Create a Matrix the same size of image
//    Mat image = new Mat(im.getHeight(), im.getWidth(), CvType.CV_8UC3);
//    // Fill Matrix with image values
//    image.put(0, 0, pixels);
//
//    return image;

   // Convert buffered image to byte array
        byte[] pixels = ((DataBufferByte) im.getRaster().getDataBuffer()).getData();

        // Create a matrix the same size as the image
        Mat image = new Mat(im.getHeight(), im.getWidth(), CvType.CV_8UC3);

        // Fill the matrix with image values
        image.put(0, 0, pixels);

        return image;

}
    
     public static BufferedImage Mat2BufferedImage(Mat mat) throws IOException{
      //Encoding the image
      MatOfByte matOfByte = new MatOfByte();
      Imgcodecs.imencode(".jpg", mat, matOfByte);
      //Storing the encoded Mat in a byte array
      byte[] byteArray = matOfByte.toArray();
      //Preparing the Buffered Image
      InputStream in = new ByteArrayInputStream(byteArray);
      BufferedImage bufImage = ImageIO.read(in);
      return bufImage;
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Choice choice1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    // End of variables declaration//GEN-END:variables
}
